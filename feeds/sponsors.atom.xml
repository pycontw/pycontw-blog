<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyCon Taiwan Blog - sponsors</title><link href="https://conf.python.tw/" rel="alternate"></link><link href="https://conf.python.tw/feeds/sponsors.atom.xml" rel="self"></link><id>https://conf.python.tw/</id><updated>2023-11-23T08:10:00+08:00</updated><entry><title>PyCon Taiwan 2023 贊助商 國泰金控 Cathay Financial Holdings</title><link href="https://conf.python.tw/pycon-tw-2023-sponsor-cathay.html" rel="alternate"></link><published>2023-11-23T08:10:00+08:00</published><updated>2023-11-23T08:10:00+08:00</updated><author><name>Kevin</name></author><id>tag:conf.python.tw,2023-11-23:/pycon-tw-2023-sponsor-cathay.html</id><summary type="html">&lt;p&gt;&lt;img alt="cathay1" src="images/2023-11-12-pycon-tw-2023-sponsor-cathay/cathay-1.jpeg" width="400"&gt; &lt;br&gt; 來看看白金級贊助商國泰金控的介紹與精選職缺吧！&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;公司介紹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;精選職缺&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="cathay1" src="images/2023-11-12-pycon-tw-2023-sponsor-cathay/cathay-1.jpeg"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;公司介紹&lt;/h2&gt;
&lt;p&gt;國泰金控以成為亞洲最佳金融機構為目標，除了在國內市場穩居領導地位，對外亦持續積極地朝亞太地區拓點，藉由打造區域平台的核心策略以提供客戶整合性的金融服務。同時也致力於推動集團數位轉型，以數據驅動、突破創新為理念，協助集團各子公司打造跨界金融，一步到位的金融服務。國泰金控數位數據暨科技發展中心長期投入大量資源，專注於資料科學領域研發，與旗下各子公司探討資料科學技術的創新應用，以數據驅動金融科技創新，提供有感、有效的客戶數位體驗，致力成為亞洲數位生態圈及科技金融領頭羊。&lt;/p&gt;
&lt;h2 id="_2"&gt;精選職缺&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公司&lt;/th&gt;
&lt;th&gt;職缺&lt;/th&gt;
&lt;th&gt;連結&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;國泰金控DDT&lt;/td&gt;
&lt;td&gt;資料科學工程師(Python程式開發)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6w7ov"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰金控DDT&lt;/td&gt;
&lt;td&gt;資料科學工程師(Kubernetes K8s平台產品開發)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6k5fs"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰金控DDT&lt;/td&gt;
&lt;td&gt;資深資料科學分析師(Sr. Data Scientist R&amp;amp;D)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7ztom"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰金控DDT&lt;/td&gt;
&lt;td&gt;資料科學分析師(Data Scientist R&amp;amp;D)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7qtpx"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰世華銀行&lt;/td&gt;
&lt;td&gt;資料科學工程師 (數數發中心,DDT)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6v7pz"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰世華銀行&lt;/td&gt;
&lt;td&gt;資料營運工程師(Hadoop)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7gajq"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰世華銀行&lt;/td&gt;
&lt;td&gt;資料營運工程師(SRE)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6xu96"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰世華銀行&lt;/td&gt;
&lt;td&gt;數據工程師 (數數發中心,DDT)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7mb38"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰人壽&lt;/td&gt;
&lt;td&gt;資料科學工程師&lt;/td&gt;
&lt;td&gt;預計10月後會於104釋出此職缺&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰人壽&lt;/td&gt;
&lt;td&gt;資料科學家&lt;/td&gt;
&lt;td&gt;預計10月後會於104釋出此職缺&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;資料科學家&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6emjw"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;資深資料分析師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7qnqp"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;資料科學工程師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7ugc0"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;資料倉儲工程師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7ugc3"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;數據專案管理師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/81kk0"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;國泰產險&lt;/td&gt;
&lt;td&gt;商業數據分析師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/6l49y"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;台中資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;資料科學前端工程師 (Frontend Engineer)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/80xzh"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;台中資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;資深資料科學前端工程師 (Sr. Frontend Engineer)&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/80xz7"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;台中資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;數據工程師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/763vo"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;台中資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;資料科學家&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/763vy"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高雄資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;雲端數據工程師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/7sf4c"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高雄資訊開發中心CDC&lt;/td&gt;
&lt;td&gt;專案管理師&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.104.com.tw/job/81b74"&gt;連結&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;更詳細的職缺內容，請點連結至國泰金控人才招募網查看：&lt;a href="http://bit.ly/3KLgx8i"&gt;連結&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="cathay2" src="images/2023-11-12-pycon-tw-2023-sponsor-cathay/cathay-2.png"&gt;&lt;/p&gt;</content><category term="sponsors"></category><category term="zh-tw"></category></entry><entry><title>PyCon Taiwan 2023 贊助商行前招呼</title><link href="https://conf.python.tw/pycon-tw-2023-sponsors.html" rel="alternate"></link><published>2023-08-25T23:00:00+08:00</published><updated>2023-08-25T23:00:00+08:00</updated><author><name>Kevin</name></author><id>tag:conf.python.tw,2023-08-25:/pycon-tw-2023-sponsors.html</id><summary type="html">&lt;p&gt;2023 年白金級與金級贊助商在大會前向會眾打招呼！&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cathay-financial-holdings"&gt;白金級贊助商 國泰金控 Cathay Financial Holdings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#netskope"&gt;金級贊助商 Netskope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hennge"&gt;金級贊助商 HENNGE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#klickklack-communications"&gt;金級贊助商 可立可 KlickKlack Communications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Cathay" src="images/2023-08-24-pycon-tw-2023-sponsors/Cathay.png" width="200"&gt;&lt;/p&gt;
&lt;h2 id="cathay-financial-holdings"&gt;白金級贊助商 &lt;a href="https://www.cathayholdings.com/holdings/"&gt;國泰金控 Cathay Financial Holdings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;國泰金控今年將參與兩天的主題演講，現場邀請到國泰金控資料科學分析師陳奕惟以及國泰世華銀行資料科學分析師游騰林擔任講者。&lt;br&gt;
聽完主題演講後，務必要來國泰攤位，還有技術短講、講師交流介紹精選職缺等活動！！！&lt;br&gt;
此外，活動兩天國泰產險、國泰人壽、國泰世華銀行、國泰金控大神會到現場與各位交流！！！&lt;br&gt;
別忘了 9/2 跟 9/3 週末，來國泰攤位拿隱藏好禮，我們等你喔～&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Netskope" src="images/2023-08-24-pycon-tw-2023-sponsors/Netskope.png" width="200"&gt;&lt;/p&gt;
&lt;h2 id="netskope"&gt;金級贊助商 &lt;a href="https://www.netskope.com/"&gt;Netskope&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今年美商 Netskope 將出席 PyCon 活動，分享最新雲端安全網路的技術發展。軟體開發團隊主要分布於美國、印度和台灣，以 Python 和 Golang 兩大程式語言進行開發，提供企業完整的安全存取平台方案。內部提倡開放式企業文化，提供極具吸引力的福利待遇及工作環境。&lt;/p&gt;
&lt;p&gt;招募團隊及內部工程師們將在 Netskope 攤位上，分享 Netskope 的產品技術、工作文化和發展機會。到現場就有機會獲得精美獎品，包括文青袋、手機掛繩、馬克杯等，趕快來攤位找我們聊聊，了解矽科技公司的脈動吧！&lt;/p&gt;
&lt;p&gt;攤位活動詳情：4F，攤位編號 S2&lt;/p&gt;
&lt;p&gt;誠摯邀請您來參加，期待與您交流！&lt;/p&gt;
&lt;p&gt;Greetings! This year, Netskope will be attending PyCon to share the latest technologies in cloud security fields. Our software development team is mainly distributed in the United States, India, and Taiwan, to provide enterprises with a comprehensive security access platform solution. We advocate an open-minded and flat work culture, offering attractive benefits and working environment.&lt;/p&gt;
&lt;p&gt;Our recruitment team and engineers will be available at booth S2, sharing Netskope's product technology, work culture, and growth opportunities. Meanwhile, there's a chance to get some freebies, including tote bags, phone strap adapter, mugs, and more. Come visit our booth for a chat and gain a deeper understanding of how a Silicon Valley company works!&lt;/p&gt;
&lt;p&gt;Booth Details: 4F, S2&lt;/p&gt;
&lt;p&gt;We cordially invite you to join us and look forward to engaging with you!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="HENNGE" src="images/2023-08-24-pycon-tw-2023-sponsors/HENNGE.png" width="200"&gt;&lt;/p&gt;
&lt;h2 id="hennge"&gt;金級贊助商 &lt;a href="https://hennge.com/global"&gt;HENNGE&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Greetings from HENNGE in Japan!&lt;/p&gt;
&lt;p&gt;We are Japan’s market leader in cloud security solutions, headquartered in Tokyo. We pride ourselves on being a diverse and inclusive company with English being our official language, and we want you to be part of the HENNGE family!&lt;/p&gt;
&lt;p&gt;Please drop by our booth, grab some swags, and chat with us about the opportunities at HENNGE. Speak to you soon!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="KlickKlack" src="images/2023-08-24-pycon-tw-2023-sponsors/KlickKlack.png" width="200"&gt;&lt;/p&gt;
&lt;h2 id="klickklack-communications"&gt;金級贊助商 &lt;a href="https://www.kkco.com.tw/"&gt;可立可 KlickKlack Communications&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;企業成長過程中資訊方面的挑戰無所不在。從初創階段缺乏專業IT與MIS人員，企業主難以搭建穩固的網路基礎架構；中期階段隨著團隊和裝置管理需求增加，高效率和協作成為關鍵課題；高速成長期企業需遵守更嚴格的合規要求，包括保護公司數據和資訊安全，以利籌備上市與拓展市場。作為企業顧問，可立可了解企業各階段所面臨的挑戰，透過深入的需求分析和訪談，提供全方位的連結、協作和合規三大面向的服務，賦能企業實現成長目標。&lt;/p&gt;</content><category term="sponsors"></category><category term="zh-tw"></category><category term="en"></category><category term="PyCon TW 2023"></category></entry><entry><title>銀級贊助商 - Reuven Lerner - An intro to Python bytecodes</title><link href="https://conf.python.tw/2022-08-29-intro-to-python-bytecodes.html" rel="alternate"></link><published>2022-08-29T18:34:00+08:00</published><updated>2022-08-29T18:34:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2022-08-29:/2022-08-29-intro-to-python-bytecodes.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/intro-to-python-bytecodes.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;One of the most common myths that I encounter in my corporate training is that Python is an interpreted language. It's not really surprising that people believe that -- after all, Python is often referred to as a "scripting" language, and often has the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/intro-to-python-bytecodes.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;One of the most common myths that I encounter in my corporate training is that Python is an interpreted language. It's not really surprising that people believe that -- after all, Python is often referred to as a "scripting" language, and often has the feel of an interpreted language, one that is translated into machine code one line at a time.&lt;/p&gt;
&lt;p&gt;But in fact, Python is a byte-compiled language: First, the code that you write is translated into bytecodes -- an interim, portable format that resembles a high-level assembly language. When you run your program, those bytecodes are executed by the Python runtime. This is pretty similar to how things work in a number of other platforms, including .NET and Java -- but the process in Python is so transparent that we often don't think about it.&lt;/p&gt;
&lt;p&gt;This is often easiest to see when we define a function. Whenever we use "def", we actually do two things: First, we create a function object. Then we assign that object to a variable.  Both of these seemingly simple steps can be a bit surprising, even to people who have been using Python for many years.&lt;/p&gt;
&lt;p&gt;First, the notion that Python has "function objects" seems a bit weird. But really, it's part of Python's overall philosophy that everything is an object. Every string is an instance of class "str", every dictionary is an instance of class "dict", and every function is an instance of class "function". (Note that while both "str" and "dict" are builtin names, "function" is not.) The fact that functions are objects allows us to store them in lists and dicts, and to pass them as arguments to other functions (e.g., the "key" parameter in the builtin "sorted" function). The fact that functions are objects also means that they have attributes, names following dots (.) that act like a private dictionary.&lt;/p&gt;
&lt;p&gt;The fact that "def" assigns our newly created function object to a variable is also a bit surprising to many, especially those coming from languages in which functions and data are in separate namespaces. Python has only a single namespace, which means that you cannot have both a variable named "x" and a function named "x" at the same time.&lt;/p&gt;
&lt;p&gt;So if I execute the following code in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have assigned a new value, a function object, to the variable "hello".  I can even ask Python what type of object the variable refers to, using the "type" builtin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It doesn't matter what "hello" might have referred to before; once we have executed "def", the variable "hello" now refers to a function object. We can call our function with parentheses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not surprisingly, we get the following back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="s1"&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happens, though, when we execute our function? In order to understand that, we'll need to have a close look at what is done at compile time (i.e., when we define our function) and at runtime (i.e., when we actually run our function).&lt;/p&gt;
&lt;p&gt;I mentioned above that when we define a function, we create a function object, and that the object (like all others in Python) has attributes. The most interesting attribute on a function object is called "__code__" (pronounced "dunder-code" in the Python world, where "dunder" means "double underscore before and after a name"). This is the code object, the core of what is defined when we create a function. The code object itself has a number of attributes, the most interesting of which all start with "co_".  We can see a full list with the "dir" builtin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_code&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's a list of the attributes (a subset of the list that you'll get from running "dir") that start with co_:&lt;/p&gt;
&lt;p&gt;['co_argcount',&lt;/p&gt;
&lt;p&gt;'co_cellvars',&lt;/p&gt;
&lt;p&gt;'co_code',&lt;/p&gt;
&lt;p&gt;'co_consts',&lt;/p&gt;
&lt;p&gt;'co_filename',&lt;/p&gt;
&lt;p&gt;'co_firstlineno',&lt;/p&gt;
&lt;p&gt;'co_flags',&lt;/p&gt;
&lt;p&gt;'co_freevars',&lt;/p&gt;
&lt;p&gt;'co_kwonlyargcount',&lt;/p&gt;
&lt;p&gt;'co_lines',&lt;/p&gt;
&lt;p&gt;'co_linetable',&lt;/p&gt;
&lt;p&gt;'co_lnotab',&lt;/p&gt;
&lt;p&gt;'co_name',&lt;/p&gt;
&lt;p&gt;'co_names',&lt;/p&gt;
&lt;p&gt;'co_nlocals',&lt;/p&gt;
&lt;p&gt;'co_posonlyargcount',&lt;/p&gt;
&lt;p&gt;'co_stacksize',&lt;/p&gt;
&lt;p&gt;'co_varnames']&lt;/p&gt;
&lt;p&gt;I wrote above that when we define a function, Python compiles it into bytecodes. Those are stored inside of the co_code attribute. We can thus see the bytecodes for a function by looking at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_code&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;\&lt;span class="n"&gt;_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The good news is that this works. But the bad news is that it's pretty hard to understand what's going on here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;d&lt;/span&gt;&lt;span class="se"&gt;\x01&lt;/span&gt;&lt;span class="s1"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\x00\x9b\x00&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="se"&gt;\x02\x9d\x03&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="se"&gt;\x00&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we see here is a bytestring, a sequence of bytes -- as opposed to a sequence of characters, which is what we would have in a normal Python string. This is the code that Python executes when we run our function.&lt;/p&gt;
&lt;p&gt;But wait -- what are these codes? What do they mean, and what do they do? In order to understand, we can use the "dis" function in the "dis" module. That module (and its function) are short for "disassemble," and they allow us to break apart the function and see it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;\&lt;span class="n"&gt;_VALUE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;

                  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;BUILD&lt;/span&gt;\&lt;span class="n"&gt;_STRING&lt;/span&gt;             &lt;span class="mi"&gt;3&lt;/span&gt;

                 &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;RETURN&lt;/span&gt;\&lt;span class="n"&gt;_VALUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Things might now start to make more sense, even though we've also opened up a bunch of additional new mysteries.  The (CAPITALIZED) names that we see are the bytecodes, the names of the pseudo-assembly commands that Python recognizes.  The integers to the left of each command indicates the index into co_code with which each bytecode is associated.&lt;/p&gt;
&lt;p&gt;So the byte at index 0 is for LOAD_CONST. The byte at index 2 is LOAD_FAST. And the byte at index 4 is FORMAT_VALUE.&lt;/p&gt;
&lt;p&gt;But wait: What do these commands do? And why are we only using the even-numbered bytes?&lt;/p&gt;
&lt;p&gt;The LOAD_CONST instruction tells Python to load a constant value. We're not talking about a constant in the general language, but rather a constant value that was assigned to the function object when it was compiled. At compile time, Python noticed that there was a string, 'Hello, '. It stored that string as a constant on the function object, in a tuple named co_consts. The function can thus retrieve that constant whenever it needs.  We can, of course, look at the co_consts tuple ourselves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_code&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;\&lt;span class="n"&gt;_consts&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the element at index 1 in our function's co_consts is the string 'Hello, '.  So the first bytecode loads that constant, making it available to our Python interpreter.  But wait, where did this constant come from? Look carefully, and you'll see that it's the first part of the f-string that we return in the body of the function. That's right -- while we think of an f-string as a static string with a dynamic component (inside of the {}), Python thinks of it as the combination of static parts (which are stored in co_consts as strings) and dynamic parts (which are evaluated at runtime).&lt;/p&gt;
&lt;p&gt;So our f-string, which looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Is turned by the Python compiler into&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="s1"&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And indeed, we can see that co_consts[1] is 'Hello, ', and co_consts[2] is the single-character string '!'.  In between, we'll need to get the value of the "name" variable.&lt;/p&gt;
&lt;p&gt;In order to do this, Python needs to know if "name" is a local variable or a global one. In this case, it's an easy call: Because "name" is a parameter to our function, it is by definition a local variable. Local variable values are retrieved using the LOAD_FAST bytecode, which we see at byte index 2. But how does it know which local variable to retrieve?&lt;/p&gt;
&lt;p&gt;Fortunately, our function object also has an attribute named co_vars, a tuple of strings with all of the local variable names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_code&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;\&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co&lt;/span&gt;\&lt;span class="n"&gt;_varnames&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the argument 0 which is given to LOAD_FAST indicates that we want to retrieve the value of local variable 0, aka "name".  In the first two bytecodes, we thus load a constant and a variable name. Then Python uses the special FORMAT_VALUE bytecode to format our "name" variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_CONST&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_FAST&lt;/span&gt;                &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;\&lt;span class="n"&gt;_VALUE&lt;/span&gt;             &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Usually, formatting a value means turning it into a string using "str".  But some objects have a special "__format__" method defined, which allows them to have a special output in this context.&lt;/p&gt;
&lt;p&gt;We now have two strings on our stack -- and yes, the Python runtime is a stack machine, which you might have learned about if you studied computer science. But we need the exclamation point, so we load that, too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;LOAD&lt;/span&gt;\&lt;span class="n"&gt;_CONST&lt;/span&gt;               &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have three strings on the stack -- our initial constant, the formatted version of "name", and the constant '!'.  We now create a string, based on these three components, with another bytecode, BUILD_STRING. We hand BUILD_STRING an argument of 3, to indicate that it should create a string from the three topmost items on the stack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;BUILD&lt;/span&gt;\&lt;span class="n"&gt;_STRING&lt;/span&gt;             &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it! We have created the string that we wanted, based on the user's argument. The time has come to return that value, and we do so with the special RETURN_VALUE bytecode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;               &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;RETURN&lt;/span&gt;\&lt;span class="n"&gt;_VALUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;How often do you really need to read Python bytecodes? Never. But reading the bytecodes does give you a sense of how Python works, what it's doing behind the scenes, how particular functionality (e.g., f-strings) are implemented, and which decisions are made at compile time, rather than runtime.  Understanding Python's division of labor between compile time and runtime can, in my experience, help to make sense of error messages you get, and also to put into context so many other parts of Python that can see mysterious.&lt;/p&gt;
&lt;p&gt;I'll be talking about these and other parts of Python bytecodes, especially through the lens of functions, at PyCon APAC 2022, in my talk, "Function dissection lab." I hope to see you there!&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2022"></category></entry><entry><title>白金級贊助商 - PyCon APAC 2022 x 國泰金控 Gather Town活動搶先預告 技術短講&amp;人才諮詢&amp;限量好禮我全都要！</title><link href="https://conf.python.tw/2022-08-28-pycon-apac-2022-x-gather-town.html" rel="alternate"></link><published>2022-08-28T12:25:00+08:00</published><updated>2022-08-28T12:25:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2022-08-28:/2022-08-28-pycon-apac-2022-x-gather-town.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/pycon-apac-2022-x-gather-town.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;想知道如何在金融業運用數據力解決問題嗎？&lt;/p&gt;
&lt;p&gt;對金融業技術工作有憧憬，但找不到人了解更多嗎？&lt;/p&gt;
&lt;p&gt;國泰金 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/pycon-apac-2022-x-gather-town.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;想知道如何在金融業運用數據力解決問題嗎？&lt;/p&gt;
&lt;p&gt;對金融業技術工作有憧憬，但找不到人了解更多嗎？&lt;/p&gt;
&lt;p&gt;國泰金控PyCon專屬攤位在 Gather Town 開張囉！還有好禮可以拿！&lt;/p&gt;
&lt;p&gt;國泰長期致力數位轉型，積極透過「大數據」及「創新技術」打造內外部服務生態圈。今年國泰攤位將邀請國泰人壽、國泰產險、國泰世華銀行等專家，進行3場短講，分享子公司如何透過數據創造新機會。此外，國泰攤位也提供互動諮詢，不管是對金融業有興趣、想更了解產業工作實況，都歡迎來找我們聊聊喔！&lt;/p&gt;
&lt;p&gt;★攤位好禮別錯過：&lt;/p&gt;
&lt;p&gt;好禮1：參與攤位「技術短講」，就有機會抽100元7-11禮券&lt;/p&gt;
&lt;p&gt;好禮2：完成小任務「填問券、入社團」就有機會各獲得50元Uber eat禮卷！（數量有限，送完為止，獲得者可兌換Uber Eats禮卷乙次，唯使用禮券時需一次性使用完，相關使用規則將於禮券寄出時載明）&lt;/p&gt;
&lt;p&gt;國泰人才召募：&lt;a href="https://bit.ly/3IOFsFU"&gt;https://bit.ly/3IOFsFU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;無限大實驗室社團：&lt;a href="https://www.google.com/url?q=https://bit.ly/fintechinfinitylab&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1661398729667325&amp;amp;usg=AOvVaw0z_ZAUX2rBZRiPC8I6a1CO"&gt;https://bit.ly/fintechinfinitylab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;★技術短講資訊：將於國泰Gather Town SpaceA攤位進行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;場次一：最適業務員配對&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;時間：9/3 (SAT)11:15~11:25&lt;/p&gt;
&lt;p&gt;講者：國泰人壽 數據經營部 詹珺崴分析師 / 黃喬敬 經理&lt;/p&gt;
&lt;p&gt;內容：保險商務的推動多仰賴業務員推動，但到底哪個業務員最適合客戶呢? 國泰團隊以網路萃取特徵，結合客戶與業務員的互動紀錄進行機器學習，成功建構了一套業務員推薦系統，協助推薦客戶最適合的業務員。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;場次二：Restful to Kafka 即時模型評分服務實現&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;時間：9/3 (SAT) 14:35~14:45&lt;/p&gt;
&lt;p&gt;講者：國泰世華銀行 數據部林子暐&lt;/p&gt;
&lt;p&gt;內容：數據部門產出的模型結果需要更即時地送達前線系統，造成Restful API請求的架構漸漸呈現流程繁瑣和重複的情況。因此團隊規劃使用容器化的技術，實現串流資料的處理和服務負載的監控機制，將多個模型評分送到流處理平台Kafka，進而優化上下游系統取得各自需要模型評分的流程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;場次三：智能商險平台-以科技驅動業務模式變革&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;時間：9/4 (SUN) 11:05~11:15&lt;/p&gt;
&lt;p&gt;講者：國泰產險 數據科技發展部 李郁芳&lt;/p&gt;
&lt;p&gt;內容：如何透過科技技術改造複雜的商業險業務、加速保險商品的購買流程？團隊透過數據中台、爬蟲技術、機器學習、空間運算等數據技術，讓過去需等待幾天的報價，現在可於客戶面前2~3分鐘內就能處理完畢。這不僅讓商業險報價變得更簡單，減少客戶等待時間！同時，業務員變得更專業，增加公司獲利可能！本案技術也已於今年取得新型專利，具高度商業應用價值。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeix63HDyDTsDaN5U_wYUgXhBfV3Q9SyAAC4Pznd1ec6BbAWLz4E3zZsmVg2g2htivsnXCXnp36V_zBtNtB0wICwz2tzy-xYMDCyHlYB-NodaUehJSb8L4Z9TMBrAd9_dk0qUaea84RxzMW2DvKSG6DR9Ey8ou_S58faq-SxYTJY5lyv7uLuv1rlPMTQ/s1920/%E5%9C%8B%E6%B3%B0%E9%99%84%E5%9C%96.jpg"&gt;&lt;img alt="Cathay" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgeix63HDyDTsDaN5U_wYUgXhBfV3Q9SyAAC4Pznd1ec6BbAWLz4E3zZsmVg2g2htivsnXCXnp36V_zBtNtB0wICwz2tzy-xYMDCyHlYB-NodaUehJSb8L4Z9TMBrAd9_dk0qUaea84RxzMW2DvKSG6DR9Ey8ou_S58faq-SxYTJY5lyv7uLuv1rlPMTQ/w529-h298/%E5%9C%8B%E6%B3%B0%E9%99%84%E5%9C%96.jpg"&gt;&lt;/a&gt;#國泰技術短講 #人才諮詢 #獨家獻禮&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2022"></category></entry><entry><title>白金級贊助商 - 美光智慧製造，加速全球半導體產業發展</title><link href="https://conf.python.tw/2022-08-25-blog-post.html" rel="alternate"></link><published>2022-08-25T11:08:00+08:00</published><updated>2022-08-25T11:08:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2022-08-25:/2022-08-25-blog-post.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/blog-post.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;美光於 2014 年底開始採用大數據技術。利用新的智慧製造技術，美光全球營運 (Micron Global Operations) 團隊能部署複雜的半 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2022/08/blog-post.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;美光於 2014 年底開始採用大數據技術。利用新的智慧製造技術，美光全球營運 (Micron Global Operations) 團隊能部署複雜的半導體架構、程序以及技術，來創新與打造新產品，進而為客戶、投資人以及企業帶來價值。&lt;/p&gt;
&lt;h3 id="_1"&gt;&lt;strong&gt;台灣美光在技術方面扮演什麼角色？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;台灣美光在開發美光領先的 DRAM 產品方面扮演關鍵性角色。身為一個高產量的 DRAM 卓越製造中心，台灣美光致力於採用尖端科技生產 DRAM，提供伺服器、個人電腦、GPU、手機、高效能運算及其他領域來使用。&lt;/p&gt;
&lt;p&gt;美光台灣廠區運用智慧製造，加速創新來改善產品的品質及效率。透過智慧製造技術，台灣美光在勞工生產力相關各項指標獲得顯著提升，並且縮短了學習週期來提高產量，且節省了大量的能源消耗。&lt;/p&gt;
&lt;p&gt;美光智慧製造(Smart Manufacturing &amp;amp; AI, SMAI) 副總裁 Koen De Backer 表示：「此一認可見證了美光在採用和整合工業 4.0 技術，以及形塑半導體製造未來方面的成功。我們會透過在各廠區落實採用工業 4.0 技術，持續引領半導體製造的未來，為顧客提供更高效能的產品。」&lt;/p&gt;
&lt;h3 id="_2"&gt;&lt;strong&gt;大規模部署智慧製造的關鍵因素&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;透過採用工業 4.0 技術，美光可減少勞力密集的營運，並且重新設計各個工作項目使它發揮出更多價值。這些改變並不會減縮員工人數，但是會提升員工的技能。我們將能夠找出哪些團隊成員適合技能提升以及職涯發展，提供在職及課堂訓練，並且安排他們擔任其他職務。&lt;/p&gt;
&lt;p&gt;透過採用工業 4.0 技術，美光讓團隊成員隨時能夠取用資料，方便他們從遠端執行任務以及監控多項工具的健全情況及狀態，不需要親臨廠區或位在該設備附近。&lt;/p&gt;
&lt;h3 id="smart-manufacturing-ai-smai"&gt;&lt;strong&gt;美光智慧製造  (Smart Manufacturing &amp;amp; AI, SMAI)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;美光智慧製造，其中包含運用雲端先進科技的跨國數據團隊SMTS (SMAI technical solution team)，透過巨量資料處理技術和雲端服務，整合並建構標準化解決方案與平台，以加速美光公司內的智慧製造，成功推動各式人工智慧應用，包含製程量產優化，品質流程控管和優化，以及自動化減少人工操作。&lt;/p&gt;
&lt;p&gt;如果你喜歡巨量資料處理，想參與建構半導體先進製程的相關數據和人工智慧應用，期盼加入來自全球優秀頂尖人才的團隊，美光智慧製造團隊歡迎你&lt;/p&gt;
&lt;p&gt;想了解更多，請前往美光官網 &lt;a href="http://micron.com"&gt;micron.com&lt;/a&gt;&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2022"></category></entry><entry><title>Sponsor from Taiwan co-working space - CLBC</title><link href="https://conf.python.tw/2014-12-11-pycon-apac-2015-weekly-post-clbc-co.html" rel="alternate"></link><published>2014-12-11T22:21:00+08:00</published><updated>2014-12-11T22:21:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2014-12-11:/2014-12-11-pycon-apac-2015-weekly-post-clbc-co.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2015/02/pycon-apac-2015-weekly-post-clbc-co.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;So many people and organizations supported PyCon APAC/TW 2014, but today we want to highlight all of the help that came from CLBC Coworking Space in Taiwan.&lt;/p&gt;
&lt;p&gt;In 2013, CLBC Coworking Space, the first company in Taiwan that officially joined the Coworking …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2015/02/pycon-apac-2015-weekly-post-clbc-co.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;So many people and organizations supported PyCon APAC/TW 2014, but today we want to highlight all of the help that came from CLBC Coworking Space in Taiwan.&lt;/p&gt;
&lt;p&gt;In 2013, CLBC Coworking Space, the first company in Taiwan that officially joined the Coworking Visa Union, started their business in the Da An district. They now provide a comfortable working environment at an affordable price for more than 100 teams, and have already supported more than 800 activities. CLBC has created a perfect breeding ground where new teams can grow into robust businesses.&lt;/p&gt;
&lt;p&gt;CLBC made a big contribution to PyCon APAC/TW 2014 by offering a wonderful coaching area and free coffee to all guests, giving everyone a chance to take a break and meet new friends. A comfortable place to talk usually leads to great new ideas.&lt;/p&gt;
&lt;p&gt;In fact, the team that created PyCon APAC/TW 2014 actually started in CLBC! All of the brainstorms, plans, and discussions flourished thanks to them, so they truly made it all possible.&lt;/p&gt;
&lt;p&gt;PyCon APAC/TW 2014 wants to take this opportunity to show our gratitude to CLBC for their strong support and sponsorship this year. We look forward to even greater contributions in Taiwan and across Asia together.&lt;/p&gt;
&lt;p&gt;To learn more about CLBC, just visit their website: &lt;a href="http://l.facebook.com/l.php?u=http%3A%2F%2Fclbc.tw%2F&amp;amp;h=oAQH-04IT&amp;amp;enc=AZNawfo4bYyhF8QjCiCL6Kb5Nh206ZUToDDaSPvkmknKv94k9vS73qmct3n8sj2xh8tzyf-NVOYrL1KMCXHDSFM36wyB3rn9JCIzyOt7riTgXo_D-svEaeBIXdL1jJxumWKoZwyd_fU4D5wIDHLv-sPr&amp;amp;s=1"&gt;http://clbc.tw/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In preparation for PyCon APAC/TW 2015, we have started seeking opportunities for cooperation across different industries. Interested in lending a hand? Please join us to make our community in Taiwan even better!&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; Waiting for you&lt;br&gt;
PyCon APAC 2015 Website: &lt;a href="https://tw.pycon.org/"&gt;https://tw.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[PyCon APAC 2015 每週一推]&lt;/p&gt;
&lt;p&gt;PyCon APAC/TW 2014，也有許多夥伴用不同的形式幫助我們。以下是目前在台灣經營共用工作空間「CLBC慶隆商社」 的介紹：&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;「CLBC慶隆商社」為台灣第一家正式加入 Coworking Visa 聯盟的共用工作空間。2013年正式於台北市大安區營運後，已提供超過100個團隊進駐，並有超過800個大大小小的活動在此空間竄流。透過舒適的空間與經濟實惠的方案，為台北市注入許多創新的活水，更為創業的團隊提供分享與合作的溫床。&lt;/p&gt;
&lt;p&gt;在今年 PyCon APAC/TW 2014 的活動現場，「CLBC慶隆商社」也沒有缺席。在現場特別設置了舒適的沙發區及提供免費的咖啡，讓親臨現場的每位嘉賓能夠在中場休息的寶貴時間，有歇息聊天的空間。可別小看這幾張沙發，原本塞在腦中的 idea 就在這10-20分鐘的談天說地中慢慢發酵，讓參與者能夠有更多機會認識彼此，將更多能量激發出來！&lt;/p&gt;
&lt;p&gt;偷偷告訴大家，PyCon APAC/TW 2014 的籌備小組，也都是在「CLBC慶隆商社」的空間中將所有活動相關事務從無到有，慢慢開枝散葉。在這樣優質的空間中發想、討論、分工合作完成這個不簡單的任務！&lt;/p&gt;
&lt;p&gt;PyCon APAC/TW 2014 非常謝謝「CLBC慶隆商社」今年的鼎力支持與贊助，讓我們一起為科技在台灣甚至在亞洲，提供更多的鼓勵與推動。&lt;/p&gt;
&lt;p&gt;更多有關CLBC，歡迎參考： &lt;a href="http://clbc.tw/"&gt;http://clbc.tw/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;2015年的PyCon APAC/TW 2015 正在密集籌備中，我們正在徵求各個領域與產業的合作夥伴。只要您有興趣，歡迎與我們一同創造台灣在科技領域上更多的可能！&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; 贊助商募集中&lt;br&gt;
PyCon APAC 2015 網址&lt;br&gt;
&lt;a href="https://www.facebook.com/l.php?u=https%3A%2F%2Ftw.pycon.org%2F&amp;amp;h=PAQEWzfH0&amp;amp;s=1"&gt;https://tw.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-Y3FxRpM6_cI/VNTTwimT32I/AAAAAAAAUjU/BSUV5BSKdl0/s1600/esEAfQnOwZ-afku5WSZ3vkCs7zlJ209XzLY365QfHRnnNjuz7Eap4eyQnrboSnMNHKinCA%3Ds2048.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-Y3FxRpM6_cI/VNTTwimT32I/AAAAAAAAUjU/BSUV5BSKdl0/s1600/esEAfQnOwZ-afku5WSZ3vkCs7zlJ209XzLY365QfHRnnNjuz7Eap4eyQnrboSnMNHKinCA%3Ds2048.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-5NLl3YtLjRI/VNTTwvWbMkI/AAAAAAAAUjY/oAE2hNdsmT0/s1600/_xkRcDnUkYqmiPADjLkh1S8n6XULRhjHFjb3MklorO3PvWcXpVRlxtVtUtUFhNVw6IPz6w%3Ds2048.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-5NLl3YtLjRI/VNTTwvWbMkI/AAAAAAAAUjY/oAE2hNdsmT0/s1600/_xkRcDnUkYqmiPADjLkh1S8n6XULRhjHFjb3MklorO3PvWcXpVRlxtVtUtUFhNVw6IPz6w%3Ds2048.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2014"></category></entry><entry><title>Sponsor of PyCon 2014 - Appier</title><link href="https://conf.python.tw/2014-12-01-pycon-apac-2015-weekly-post-appier.html" rel="alternate"></link><published>2014-12-01T22:18:00+08:00</published><updated>2014-12-01T22:18:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2014-12-01:/2014-12-01-pycon-apac-2015-weekly-post-appier.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2014/12/pycon-apac-2015-weekly-post-appier.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Appier, the first company in Taiwan chosen to receive investments from Sequoia Capital in 2014, gave a lot of support to PyCon APAC 2014. We were very pleased to have an opportunity for Appier to share their knowledge and experience with us.&lt;/p&gt;
&lt;p&gt;During …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2014/12/pycon-apac-2015-weekly-post-appier.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Appier, the first company in Taiwan chosen to receive investments from Sequoia Capital in 2014, gave a lot of support to PyCon APAC 2014. We were very pleased to have an opportunity for Appier to share their knowledge and experience with us.&lt;/p&gt;
&lt;p&gt;During PyCon APAC 2014, Appier exchanged ideas with numerous partners to circulate the latest information about new applications and Python trends. Talented engineers from all over the world enthusiastically participated in this conference, which included many well-known Python researchers, professionals, business developers, and power users.&lt;/p&gt;
&lt;p&gt;PyCon gave us the chance to discuss the further development of Python with fellow enthusiasts from abroad, and helped make them aware of the talented people working on Python in Taiwan. Python really is not just a programming language, but also a culture that helps many engineers fix problems in their businesses and daily lives.&lt;/p&gt;
&lt;p&gt;Do not miss the chance to share ideas about Python next year. We expect the conference to grow significantly larger in 2015, and Appier hopes to see a lot more Trenders there. Let’s all try to join PyCon APAC 2015!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; Call for Sponsor&lt;br&gt;
PyCon APAC 2015&lt;br&gt;
&lt;a href="https://tw.pycon.org/"&gt;https://tw.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[PyCon APAC 2015 每週一推]&lt;/p&gt;
&lt;p&gt;今年在台灣獲得紅衫資本投資的 「Appier 沛星互動科技」，也給予 PyCon APAC 2014 非常多的支持。我們非常榮幸的邀請到 Appier 與大家分享今年參與的心得：&lt;/p&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Appier 很高興能夠有機會參與 PyCon APAC 2014 研討會，跟最優秀的 Python 參與者進行交流，了解更多 Python 的最新發展與應用。&lt;/p&gt;
&lt;p&gt;PyCon 就像是一個 Python 的嘉年華會，每一個參加者都對 Python 有無比的熱情，深度地投入於活動的議程當中。在 PyCon，Appier 遇見了許多優質的人才，可以說是頂尖工程師的人才集散地。&lt;/p&gt;
&lt;p&gt;PyCon 亦是一個國際級的活動，來參加的人不僅限於台灣地區的使用者，參與的講者包含了許多世界知名的 Python 研究者、業界使用者及開發者。在這裡，我們有機會與來自世界各地的優秀人才交流，進而了解 Python 的使用發展，也能讓世界一流人士更認識台灣的優秀人才。&lt;/p&gt;
&lt;p&gt;Python 不僅僅是一個程式語言，許多工程師透過 Python 解決的是人類在日常生活中、商業環境中、以及任何地方所遇到的問題。&lt;/p&gt;
&lt;p&gt;不要錯過這個可以跟國際級 Python 人才交流的機會。Appier 期待明年再次與大家相見！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我們也期待更多來自不同領域的好手及公司，支持PyCon APAC 2015 的活動。並在明年與我們相約 PyCon APAC 2015 現場！一起感受 Back to the __Future__ 的激盪與交流！&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; 贊助商募集中&lt;br&gt;
PyCon APAC 2015 網址&lt;br&gt;
&lt;a href="https://tw.pycon.org/"&gt;https://tw.pycon.org/&lt;/a&gt;&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2014"></category></entry><entry><title>The Golden sponsor of PyCon 2014 - HDE from Japan</title><link href="https://conf.python.tw/2014-11-25-pycon-apac-2015-weekly-post-hde-company.html" rel="alternate"></link><published>2014-11-25T22:14:00+08:00</published><updated>2014-11-25T22:14:00+08:00</updated><author><name>PyCon Taiwan Blogger contributors</name></author><id>tag:conf.python.tw,2014-11-25:/2014-11-25-pycon-apac-2015-weekly-post-hde-company.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2014/11/pycon-apac-2015-weekly-post-hde-company.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The Golden sponsor of 2014, HDE, which is shared their delighted experience of finding talented engineers through PyCon APAC 2014! Here we (PyConTW) would like to share it with you.&lt;/p&gt;
&lt;p&gt;PyConTW: What inspired you to consented to be one of the most important …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This was originally posted on blogger &lt;a href="https://pycontw.blogspot.com/2014/11/pycon-apac-2015-weekly-post-hde-company.html"&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The Golden sponsor of 2014, HDE, which is shared their delighted experience of finding talented engineers through PyCon APAC 2014! Here we (PyConTW) would like to share it with you.&lt;/p&gt;
&lt;p&gt;PyConTW: What inspired you to consented to be one of the most important sponsors of PyCon APAC 2014?&lt;br&gt;
Name of HDE, Inc. is known to many Japanese companies. However, we&lt;br&gt;
didn't have much presence in abroad. To make HDE, Inc. and our cloud&lt;br&gt;
service HDE One to be known more in abroad, we started to sponsor&lt;br&gt;
technology events in abroad. And, PyCon APAC 2014 was a first&lt;br&gt;
experience for us to sponsor a technology conference abroad.&lt;/p&gt;
&lt;p&gt;PyConTW: How was the experience of sponsoring PyCon APAC?&lt;br&gt;
In the beginning, we were afraid to have a difficulty in communication. Even though we had a little difficulty about speaking language, what we found was that if we have common technology backgrounds, we can communicate and share our information. Furthermore, it was precious experience for us to exchange information with foreign developers.&lt;/p&gt;
&lt;p&gt;We believe that diversity of the community will stimulate new creation and will activate the community more. And, we are pleased that we were able to participate such conference. We hope that there will be more diverse developers from APAC countries to participate next PyCon APAC.&lt;/p&gt;
&lt;p&gt;And, we wish next PyCon APAC to become more successful conference.&lt;/p&gt;
&lt;p&gt;Thanks HDE, It would be no success without their great support.&lt;br&gt;
PyCon APAC 2015 is coming, what are you waiting for? Join us, we need you&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; Call for sponsors&lt;/p&gt;
&lt;p&gt;Visit our PyCon APAC 2015 web page&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tw.pycon.org/2015apac/"&gt;https://tw.pycon.org/2015apac/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[PyCon APAC 2015 每週一推]&lt;/p&gt;
&lt;p&gt;PyCon APAC 2014 金級贊助商 HDE 公司，在合作過程中，成功招募優秀工程師加入團隊！我們 (年會籌備團隊，接下來簡稱 PyConTW) 將 HDE 公司贊助 PyCon APAC 2014 的經驗，整理成採訪稿，和大家分享：&lt;/p&gt;
&lt;p&gt;PyConTW：請問 HDE 公司考量贊助 PyCon APAC 2014 的原因是?&lt;br&gt;
HDE ：HDE, Inc. 是一家在日本業界頗負盛名的資訊公司。然而我們也希望可以讓 HDE, Inc.和我們的雲端服務 HDE One 更廣為海外的夥伴所認識，因此，我們開始贊助海外的科技活動。&lt;/p&gt;
&lt;p&gt;PyConTW：這次的贊助經驗有怎樣的收獲呢?&lt;br&gt;
HDE ：PyCon APAC 2014 是我們第一次贊助海外研討會，一開始我們擔心會有溝通上的問題，但我們發現只要有共同的背景知識，我們就可以互相溝通與分享資訊。對我們而言和國外的程式設計師交流真的是很難能可貴的經驗。&lt;br&gt;
我們相信社群團體的多樣性能夠帶動活動並激發更新的創意，很高興能夠參加這個會議，也希望會有更多從亞太各地前來的程式設計師參加下一屆的PyCon APAC。我們衷心期盼 PyCon APAC 2015 更加成功！&lt;/p&gt;
&lt;p&gt;看到了這些成功的贊助經驗還在等什麼，快來一起加入 PyCon APAC 2015 吧！&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/hashtag/pyconapac2015"&gt;#pyconapac2015&lt;/a&gt; 贊助商募集中&lt;br&gt;
PyCon APAC 2015 網址&lt;br&gt;
&lt;a href="https://tw.pycon.org/"&gt;https://tw.pycon.org/&lt;/a&gt;&lt;/p&gt;</content><category term="sponsors"></category><category term="legacy-blogger"></category><category term="PyCon APAC 2014"></category></entry></feed>